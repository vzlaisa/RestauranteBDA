/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package modulo_productos;

import coordinadores.CoordinadorAplicacion;
import enums.TipoProducto;
import enums.UnidadMedida;
import excepciones.PresentacionException;
import java.awt.Component;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableRowSorter;
import utilerias.Utilerias;
import validaciones.Validaciones;

/**
 *
 * @author rocha
 */
public class RegistrarProductoFrm extends JFrame {
    
    private CoordinadorAplicacion coordinadorAplicacion;
    
    private final DefaultTableModel tableModel;
    private final TableRowSorter<DefaultTableModel> tableSorter; // Filtro para la tabla
    private DefaultListModel<String> listModel; // Modelo para la lista
    private List<String> ingredientes; // PROVISIONAL
    
    /**
     * Creates new form RegistrarProductoFrm
     */
    public RegistrarProductoFrm() {
        initComponents();
        getContentPane().setBackground(java.awt.Color.WHITE);
        this.setTitle("Registrar Producto");
        this.setLocationRelativeTo(null);
        this.coordinadorAplicacion = CoordinadorAplicacion.getInstancia();
        
        listModel = new DefaultListModel<>();
        listBuscarIngrediente.setModel(listModel);
        
        tableModel = new DefaultTableModel(new Object[]{"Ingrediente", "Unidad", "-", "Cantidad", "+"}, 0);
        tblIngredientes.setModel(tableModel);
        tblIngredientes.setDefaultEditor(Object.class, null);
        tableSorter = new TableRowSorter<>(tableModel);
        tblIngredientes.setRowSorter(tableSorter);
        
        tblIngredientes.getColumnModel().getColumn(2).setCellRenderer(new ButtonRenderer()); // Hace que las columnas se vean como botones
        tblIngredientes.getColumnModel().getColumn(4).setCellRenderer(new ButtonRenderer());
        tblIngredientes.getColumnModel().getColumn(2).setCellEditor(new ButtonEditor(new JCheckBox(), false)); // Botón "-"
        tblIngredientes.getColumnModel().getColumn(4).setCellEditor(new ButtonEditor(new JCheckBox(), true));  // Botón "+"
        
        // PROVISIONAL PARA PRUEBAS
        this.ingredientes = new ArrayList<>(Arrays.asList("Jamón de pavo", "Jamón serrano", "Lechuga"));
        
        cargarTipos();
        cargarUnidades();
        cargarListeners();
        buscarIngrediente();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lbTitulo = new javax.swing.JLabel();
        lbDatosGenerales = new javax.swing.JLabel();
        lbNombreProducto = new javax.swing.JLabel();
        txtPrecio = new javax.swing.JTextField();
        lbPrecio = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        lbCategoria = new javax.swing.JLabel();
        cbTipo = new javax.swing.JComboBox<>();
        lbSeleccionarIngredientes = new javax.swing.JLabel();
        txtBuscarIngrediente = new javax.swing.JTextField();
        lbBuscarIngrediente = new javax.swing.JLabel();
        lbUnidadMedida = new javax.swing.JLabel();
        cbUnidadMedida = new javax.swing.JComboBox<>();
        scBuscarIngrediente = new javax.swing.JScrollPane();
        listBuscarIngrediente = new javax.swing.JList<>();
        scTablaIngredientes = new javax.swing.JScrollPane();
        tblIngredientes = new javax.swing.JTable();
        lbTablaIngredientes = new javax.swing.JLabel();
        btnGuardar = new javax.swing.JButton();
        btnAtras = new javax.swing.JButton();
        btnAgregar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        lbTitulo.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        lbTitulo.setText("Registrar Producto");

        lbDatosGenerales.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lbDatosGenerales.setText("Datos generales");

        lbNombreProducto.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lbNombreProducto.setText("Nombre del producto");

        txtPrecio.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        lbPrecio.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lbPrecio.setText("Precio");

        txtNombre.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        lbCategoria.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lbCategoria.setText("Tipo / Categoría");

        cbTipo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cbTipo.setMaximumRowCount(5);

        lbSeleccionarIngredientes.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lbSeleccionarIngredientes.setText("Seleccionar ingredientes");

        txtBuscarIngrediente.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtBuscarIngrediente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBuscarIngredienteKeyReleased(evt);
            }
        });

        lbBuscarIngrediente.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lbBuscarIngrediente.setText("Ingrese el nombre del ingrediente");

        lbUnidadMedida.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lbUnidadMedida.setText("Filtrar por unidad de medida");

        cbUnidadMedida.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cbUnidadMedida.setMaximumRowCount(5);

        listBuscarIngrediente.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        listBuscarIngrediente.setMinimumSize(new java.awt.Dimension(13, 20));
        listBuscarIngrediente.setVisibleRowCount(5);
        scBuscarIngrediente.setViewportView(listBuscarIngrediente);

        tblIngredientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ingrediente", "Unidad", "-", "Cantidad", "+"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblIngredientes.setRowSelectionAllowed(false);
        tblIngredientes.getTableHeader().setResizingAllowed(false);
        tblIngredientes.getTableHeader().setReorderingAllowed(false);
        scTablaIngredientes.setViewportView(tblIngredientes);

        lbTablaIngredientes.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lbTablaIngredientes.setText("Ingredientes seleccionados");

        btnGuardar.setBackground(new java.awt.Color(0, 0, 0));
        btnGuardar.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnGuardar.setForeground(new java.awt.Color(255, 255, 255));
        btnGuardar.setText("Guardar");
        btnGuardar.setBorderPainted(false);
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnAtras.setBackground(new java.awt.Color(0, 0, 0));
        btnAtras.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnAtras.setForeground(new java.awt.Color(255, 255, 255));
        btnAtras.setText("Atrás");
        btnAtras.setBorderPainted(false);
        btnAtras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtrasActionPerformed(evt);
            }
        });

        btnAgregar.setBackground(new java.awt.Color(0, 0, 0));
        btnAgregar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnAgregar.setForeground(new java.awt.Color(255, 255, 255));
        btnAgregar.setText("Agregar ingrediente");
        btnAgregar.setBorderPainted(false);
        btnAgregar.setEnabled(false);
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addComponent(btnAtras, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(73, 73, 73))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbTitulo)
                .addGap(325, 325, 325))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lbDatosGenerales)
                    .addComponent(lbNombreProducto)
                    .addComponent(txtPrecio)
                    .addComponent(lbPrecio)
                    .addComponent(txtNombre)
                    .addComponent(lbCategoria)
                    .addComponent(cbTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(scBuscarIngrediente, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbSeleccionarIngredientes)
                            .addComponent(lbBuscarIngrediente)
                            .addComponent(txtBuscarIngrediente, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbUnidadMedida, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbUnidadMedida))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(scTablaIngredientes, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbTablaIngredientes))
                        .addGap(37, 37, 37))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnAgregar)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addComponent(lbTitulo)
                .addGap(48, 48, 48)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbDatosGenerales)
                    .addComponent(lbSeleccionarIngredientes))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbNombreProducto)
                            .addComponent(lbTablaIngredientes))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scTablaIngredientes, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAtras, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(43, 43, 43))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtNombre, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)
                                .addGap(12, 12, 12)
                                .addComponent(lbPrecio)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(24, 24, 24)
                                .addComponent(lbCategoria)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(83, 83, 83))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lbUnidadMedida)
                                .addGap(4, 4, 4)
                                .addComponent(cbUnidadMedida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lbBuscarIngrediente)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtBuscarIngrediente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(scBuscarIngrediente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addComponent(btnAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(110, 110, 110))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtBuscarIngredienteKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscarIngredienteKeyReleased
        buscarIngrediente();
    }//GEN-LAST:event_txtBuscarIngredienteKeyReleased

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        guardar();
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnAtrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtrasActionPerformed
        atras();
    }//GEN-LAST:event_btnAtrasActionPerformed

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        agregarIngrediente();
    }//GEN-LAST:event_btnAgregarActionPerformed

    // Renderizador para el botón en la tabla (solo apariencia)
    class ButtonRenderer extends JButton implements TableCellRenderer {

        public ButtonRenderer() {
            setOpaque(true); // Hacer el botón no transparente
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            setText(value == null ? "" : value.toString()); // Establece el texto del botón basado en el valor de la celda
            return this; // Devuelve el botón para mostrarlo en la celda de la tabla
        }
    }

    // Editor de botones para manejar incremento y decremento
    class ButtonEditor extends DefaultCellEditor {

        private JButton button;
        private boolean isIncrement; // Determina si el botón es para incrementar o decrementar
        private int row;

        public ButtonEditor(JCheckBox checkBox, boolean isIncrement) {
            super(checkBox);
            this.isIncrement = isIncrement;

            // Crear el botón con el texto adecuado para incrementar o decrementar
            this.button = new JButton(isIncrement ? "+" : "-");
            button.setOpaque(true);
            button.addActionListener(e -> manejarCantidad()); // Asocia el evento de clic al método que maneja la cantidad
        }

        // Lógica común para incrementar o decrementar la cantidad
        private void manejarCantidad() {
            int cantidad = (int) tableModel.getValueAt(row, 3);  // Obtener la cantidad de la celda correspondiente
            if (isIncrement) {
                tableModel.setValueAt(cantidad + 1, row, 3); // Incrementar la cantidad
            } else {
                if (cantidad > 1) {
                    tableModel.setValueAt(cantidad - 1, row, 3); // Decrementar la cantidad si es mayor que 1
                } else {
                    tableModel.removeRow(row); // Eliminar la fila si la cantidad es 0
                    buscarIngrediente();
                }
            }
            fireEditingStopped();  // Detener la edición después de hacer clic
        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
            this.row = row;
            return button; // Mostrar el botón como componente de edición
        }

        @Override
        public Object getCellEditorValue() {
            return isIncrement ? "+" : "-"; // Retornar el símbolo adecuado
        }
    }

    private void cargarListeners() {
        // Listener para la lista de ingredientws
        listBuscarIngrediente.addListSelectionListener(evt -> {
            if (!evt.getValueIsAdjusting()) {
                // Verifica si hay un elemento seleccionado en la lista
                if (listBuscarIngrediente.getSelectedValue() != null && !listBuscarIngrediente.getSelectedValue().isEmpty()) {
                    cbUnidadMedida.setEnabled(true); // Habilita el combobox de unidades
                } else {
                    cbUnidadMedida.setEnabled(false); // Deshabilita el combobox si no hay selección
                    btnAgregar.setEnabled(false); // Deshabilita el botón si no hay selección en el combobox
                }
            }
        });

//        // Listener para el combobox de unidades
//        cbUnidadMedida.addActionListener(evt -> {
//            // Verifica si el combobox tiene un ítem válido seleccionado
//            if (cbUnidadMedida.getSelectedIndex() != 0) { // Si tiene seleccionado una opción válida
//                btnAgregar.setEnabled(true); // Habilita el botón de agregar ingrediente
//            } else {
//                btnAgregar.setEnabled(false); // Deshabilita el botón si el combobox no tiene una selección válida
//            }
//        });
    }

    /**
     * Cargar los tipos de producto al combobox. Este método agrega los tipos de
     * productos obteniendolos directamente del enum. Agrega elemeto "No
     * seleccionado" como default.
     */
    private void cargarTipos() {
        cbTipo.addItem("No seleccionado"); // Opción por defecto

        for (TipoProducto tipo : TipoProducto.values()) {
            cbTipo.addItem(tipo.name()); // Agregar valores del Enum
        }

        cbTipo.setSelectedIndex(0); // Asignar el valor por defecto como seleccionado
    }

    // CAMBIAR A QUE SOLO SE CARGUEN LAS UNIDADES DE MEDIDA DEL INGREDIENTE
    private void cargarUnidades() {
        cbUnidadMedida.addItem("No seleccionado");

        for (UnidadMedida unidad : UnidadMedida.values()) {
            cbUnidadMedida.addItem(unidad.name());
        }

        cbUnidadMedida.setSelectedIndex(0);
    }

    /**
     * Actualizar la lista de ingredientes del buscador. Este método actualiza
     * la lista de ingredientes con base en el texto ingresado en el campo de
     * búsqueda. Hace uso del método estático de Utilerias.
     */
    private void buscarIngrediente() {
        Utilerias.actualizarListaBuscador(listBuscarIngrediente, listModel, ingredientes, scBuscarIngrediente, txtBuscarIngrediente);
    }

    /**
     * Método para agregar un ingrediente seleccionado. Agrega el ingrediente
     * seleccionado a la tabla de ingredientes. Hace uso del método estático de
     * Utilerías.
     */
    private void agregarIngrediente() {
        Utilerias.agregarElementoDesdeBoton(listBuscarIngrediente, cbUnidadMedida, tableModel, this);
    }

    /**
     * Registra un nuevo producto. Este método registra un nuevo producto,
     * validandolo antes del proceso.
     *
     * @throws PresentacionException Si un dato ingresado no es válido o si hubo
     * un error al intentar el registro.
     */
    private void registrarProducto() throws PresentacionException {
        try {
            validarCamposProducto();

            // FALTA LOGICA PARA REGISTRAR EL PRODUCTO. VALIDAR QUE NO ESTE REPETIDO
        } catch (PresentacionException e) {
            throw new PresentacionException("Error al registrar producto: " + e.getMessage(), e);
        }
    }

    /**
     * Valida todos los campos ingresados del registro del producto.
     *
     * @throws PresentacionException Si algún campo ingresado no es válido (a
     * nivel presentación).
     */
    private void validarCamposProducto() throws PresentacionException {
        Validaciones.validarTexto(txtNombre.getText().trim(), "nombre del producto");
        Validaciones.validarNumero(txtPrecio.getText().trim(), "precio del producto");
        Validaciones.validarCombobox(cbTipo, "tipo de producto");
        Validaciones.validarSeleccionTabla(tableModel, "ingrediente");
    }

    /**
     * Limpia todos los campos de los componentes.
     */
    private void limpiarCampos() {
        this.txtNombre.setText("");
        this.txtPrecio.setText("");
        this.cbTipo.setSelectedIndex(0);
        this.txtBuscarIngrediente.setText("");
        this.listModel.clear();
        this.cbUnidadMedida.setSelectedIndex(0);
        this.tableModel.setRowCount(0);
    }

    /**
     * Inicia el proceso para registrar un producto. Implementa confirmaciones y
     * mensajes mediante cuadros de diálogo.
     */
    private void guardar() {
        int opcion = JOptionPane.showConfirmDialog(this,
                "¿Está seguro que desea registrar el producto?",
                "Confirmar registro", JOptionPane.YES_NO_OPTION);
        if (opcion != JOptionPane.YES_OPTION) {
            return;
        }

        try {
            registrarProducto();
            JOptionPane.showMessageDialog(this, "Producto registrado con éxito.", "Registro confirmado", JOptionPane.INFORMATION_MESSAGE);
            limpiarCampos();
        } catch (PresentacionException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    /**
     * Verifica si hay campos con información ingresada.
     * @return True si encontró al menos un campo con información, false en caso contrario.
     */
    private boolean camposIngresados() {
        return !txtNombre.getText().isBlank() || !txtPrecio.getText().isBlank() || cbTipo.getSelectedIndex() != 0 || cbUnidadMedida.getSelectedIndex() != 0 || tableModel.getRowCount() != 0;
    }

    /**
     * Regresa al menú principal. Implementa confirmación para cancelar registro
     * si se detecta que hay información ingresada.
     */
    private void atras() {
        if (camposIngresados()) {
            int opcion = JOptionPane.showConfirmDialog(this,
                    "¿Está seguro que desea cancelar el registro del producto?",
                    "Confirmar cancelación de registro", JOptionPane.YES_NO_OPTION);
            if (opcion != JOptionPane.YES_OPTION) {
                return;
            }

            JOptionPane.showMessageDialog(this, "No se registró el producto.", "Cancelación confirmada", JOptionPane.INFORMATION_MESSAGE);
            limpiarCampos();
        }
        
        this.dispose();
        coordinadorAplicacion.mostrarMenu();
    }
    
    // PRIMERO VA A SELECCIONAR UNA UNIDAD, LA LISTA SE CARGA CON LOS DE ESA UNIDAD. SI NO SELECCIONA UNIDAD, MUESTRA TODOS LOS PRODUCTOS
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnAtras;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JComboBox<String> cbTipo;
    private javax.swing.JComboBox<String> cbUnidadMedida;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lbBuscarIngrediente;
    private javax.swing.JLabel lbCategoria;
    private javax.swing.JLabel lbDatosGenerales;
    private javax.swing.JLabel lbNombreProducto;
    private javax.swing.JLabel lbPrecio;
    private javax.swing.JLabel lbSeleccionarIngredientes;
    private javax.swing.JLabel lbTablaIngredientes;
    private javax.swing.JLabel lbTitulo;
    private javax.swing.JLabel lbUnidadMedida;
    private javax.swing.JList<String> listBuscarIngrediente;
    private javax.swing.JScrollPane scBuscarIngrediente;
    private javax.swing.JScrollPane scTablaIngredientes;
    private javax.swing.JTable tblIngredientes;
    private javax.swing.JTextField txtBuscarIngrediente;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtPrecio;
    // End of variables declaration//GEN-END:variables
}