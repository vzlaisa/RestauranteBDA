/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package modulo_ingredientes;

import coordinadores.CoordinadorAplicacion;
import excepciones.PresentacionException;
import java.awt.BorderLayout;
import java.awt.Component;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.DefaultCellEditor;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableRowSorter;
import modulo_productos.RegistrarProductoFrm;

/**
 *
 * @author Ximena
 */
public class ActualizarStockIngredienteFrm extends javax.swing.JFrame {

    private CoordinadorAplicacion coordinadorAplicacion;
    private BuscadorIngredientesPanel buscadorPanel;
    
    private final DefaultTableModel tableModel;
    private final TableRowSorter<DefaultTableModel> tableSorter;
    
    /**
     * Creates new form AumentarStockIngredienteFrm
     */
    public ActualizarStockIngredienteFrm() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.coordinadorAplicacion = CoordinadorAplicacion.getInstancia();
        
        tableModel = new DefaultTableModel(new Object[]{"Ingrediente", "Unidad", "-", "Stock", "+"}, 0);
        tablaIncrementoStock.setModel(tableModel);
        tablaIncrementoStock.setDefaultEditor(Object.class, null);
        tableSorter = new TableRowSorter<>(tableModel);
        tablaIncrementoStock.setRowSorter(tableSorter);
        
        tablaIncrementoStock.getColumnModel().getColumn(2).setCellRenderer(new ActualizarStockIngredienteFrm.ButtonRenderer()); // Hace que las columnas se vean como botones
        tablaIncrementoStock.getColumnModel().getColumn(4).setCellRenderer(new ActualizarStockIngredienteFrm.ButtonRenderer());
        tablaIncrementoStock.getColumnModel().getColumn(2).setCellEditor(new ActualizarStockIngredienteFrm.ButtonEditor(new JCheckBox(), false)); // Botón "-"
        tablaIncrementoStock.getColumnModel().getColumn(4).setCellEditor(new ActualizarStockIngredienteFrm.ButtonEditor(new JCheckBox(), true));  // Botón "+"
        
        insertarPanelBuscador();
        cargarListeners();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelPrincipal = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnAtras = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        btnSeleccionar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaIncrementoStock = new javax.swing.JTable();
        panelBuscador = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panelPrincipal.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setText("Actualizar Stock");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setText("Buscar Ingrediente");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setText("Actualizar Stock");

        btnAtras.setBackground(new java.awt.Color(0, 0, 0));
        btnAtras.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnAtras.setForeground(new java.awt.Color(255, 255, 255));
        btnAtras.setText("Atrás");
        btnAtras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtrasActionPerformed(evt);
            }
        });

        btnGuardar.setBackground(new java.awt.Color(0, 0, 0));
        btnGuardar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnGuardar.setForeground(new java.awt.Color(255, 255, 255));
        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel6.setText("Ingrediente seleccionado");

        btnSeleccionar.setBackground(new java.awt.Color(0, 0, 0));
        btnSeleccionar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnSeleccionar.setForeground(new java.awt.Color(255, 255, 255));
        btnSeleccionar.setText("Seleccionar");
        btnSeleccionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSeleccionarActionPerformed(evt);
            }
        });

        tablaIncrementoStock.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Nombre", "Unidad", "-", "Stock", "+"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tablaIncrementoStock);

        javax.swing.GroupLayout panelBuscadorLayout = new javax.swing.GroupLayout(panelBuscador);
        panelBuscador.setLayout(panelBuscadorLayout);
        panelBuscadorLayout.setHorizontalGroup(
            panelBuscadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 205, Short.MAX_VALUE)
        );
        panelBuscadorLayout.setVerticalGroup(
            panelBuscadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 229, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout panelPrincipalLayout = new javax.swing.GroupLayout(panelPrincipal);
        panelPrincipal.setLayout(panelPrincipalLayout);
        panelPrincipalLayout.setHorizontalGroup(
            panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPrincipalLayout.createSequentialGroup()
                .addGap(234, 234, 234)
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelPrincipalLayout.createSequentialGroup()
                .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelPrincipalLayout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnSeleccionar)
                            .addComponent(panelBuscador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(btnAtras, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 105, Short.MAX_VALUE)
                        .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)))
                    .addGroup(panelPrincipalLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(37, 37, 37))
        );
        panelPrincipalLayout.setVerticalGroup(
            panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPrincipalLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel1)
                .addGap(37, 37, 37)
                .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelPrincipalLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(panelBuscador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnSeleccionar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAtras, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAtrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtrasActionPerformed
        atras();
    }//GEN-LAST:event_btnAtrasActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        try {
            guardar();
        } catch (PresentacionException ex) {
            Logger.getLogger(ActualizarStockIngredienteFrm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnSeleccionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSeleccionarActionPerformed
        seleccionarIngrediente();
    }//GEN-LAST:event_btnSeleccionarActionPerformed

    // Renderizador para el botón en la tabla (solo apariencia)
    class ButtonRenderer extends JButton implements TableCellRenderer {

        public ButtonRenderer() {
            setOpaque(true); // Hacer el botón no transparente
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            setText(value == null ? "" : value.toString()); // Establece el texto del botón basado en el valor de la celda
            return this; // Devuelve el botón para mostrarlo en la celda de la tabla
        }
    }
    
    // Editor de botones para manejar incremento y decremento
    class ButtonEditor extends DefaultCellEditor {

        private JButton button;
        private boolean isIncrement; // Determina si el botón es para incrementar o decrementar
        private int row;

        public ButtonEditor(JCheckBox checkBox, boolean isIncrement) {
            super(checkBox);
            this.isIncrement = isIncrement;

            // Crear el botón con el texto adecuado para incrementar o decrementar
            this.button = new JButton(isIncrement ? "+" : "-");
            button.setOpaque(true);
            button.addActionListener(e -> manejarCantidad()); // Asocia el evento de clic al método que maneja la cantidad
        }

        // Lógica común para incrementar o decrementar la cantidad
        private void manejarCantidad() {
            int cantidad = (int) tableModel.getValueAt(row, 3);  // Obtener la cantidad de la celda correspondiente
            if (isIncrement) {
                tableModel.setValueAt(cantidad + 1, row, 3); // Incrementar la cantidad
            } else {
                if (cantidad > 1) {
                    tableModel.setValueAt(cantidad - 1, row, 3); // Decrementar la cantidad si es mayor que 1
                } else {
                    tableModel.removeRow(row); // Eliminar la fila si la cantidad es 0
                    buscadorPanel.buscarIngredientes();
                }
            }
            fireEditingStopped();  // Detener la edición después de hacer clic
        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
            this.row = row;
            return button; // Mostrar el botón como componente de edición
        }

        @Override
        public Object getCellEditorValue() {
            return isIncrement ? "+" : "-"; // Retornar el símbolo adecuado
        }
    }
    
    private void insertarPanelBuscador() {
        this.buscadorPanel = new BuscadorIngredientesPanel();
        this.buscadorPanel.setVisible(true);
        
        panelBuscador.setLayout(new BorderLayout());
        panelBuscador.add(buscadorPanel, BorderLayout.EAST);
        panelBuscador.revalidate();
        panelBuscador.repaint();
    }
    
    private void seleccionarIngrediente() {
        String elementoSeleccionado = buscadorPanel.getlListaIngredientes().getSelectedValue();
        if (elementoSeleccionado == null || elementoSeleccionado.isEmpty()) {
            return;
        }
        
        String nombre = "";
        String unidad = "";
        // Expresión regular para extraer "Nombre" y "UNIDAD"
        Pattern pattern = Pattern.compile("^(.*?)\\s*\\((.*?)\\)$");
        Matcher matcher = pattern.matcher(elementoSeleccionado);

        if (matcher.matches()) {
            nombre = matcher.group(1); // Captura el nombre
            unidad = matcher.group(2); // Captura la unidad
        }
        // Buscar el elemento en la tabla y actualizar
        for (int i = 0; i < tableModel.getRowCount(); i++) {
            if (tableModel.getValueAt(i, 0).equals(nombre)) {
                return;
            }
        }

        tableModel.addRow(new Object[]{nombre, unidad, "-", 1, "+"});
    }
    
    private void cargarListeners() {
        // Agregar el listener a la lista
        buscadorPanel.getlListaIngredientes().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                // Habilitar el botón si hay un elemento seleccionado
                btnSeleccionar.setEnabled(!buscadorPanel.getlListaIngredientes().isSelectionEmpty());
            }
        });
    }
    
    private boolean cambios() {
        return tableModel.getRowCount() != 0;
    }
    
    private void limpiarCampos() {
        this.buscadorPanel.getTxtNombreIngrediente().setText("");
        this.buscadorPanel.getCbUnidadMedida().setSelectedIndex(0);
        this.tableModel.setRowCount(0);
    }
    
    private void guardar() throws PresentacionException {
        int opcion = JOptionPane.showConfirmDialog(this,
                "¿Está seguro que desea guardar los cambios?", "Confirmar cambios",
                JOptionPane.YES_NO_OPTION);
        if (opcion != JOptionPane.YES_OPTION) {
            return;
        }
        
        JOptionPane.showMessageDialog(this, "Cantidad de stock actualizada con éxito.",
                "Cambios guardados", JOptionPane.INFORMATION_MESSAGE);
        limpiarCampos();
    }
    
    private void atras() {
        if (cambios()) {
            int opcion = JOptionPane.showConfirmDialog(this, 
                "¿Está seguro que desea cancelar los cambios?",
                "Cancelar cambios", JOptionPane.YES_NO_OPTION);
            if (opcion != JOptionPane.YES_OPTION) {
                return;
            }
            
            JOptionPane.showMessageDialog(this, "No se guardaron los cambios", "Cancelación confirmada", JOptionPane.INFORMATION_MESSAGE);
            limpiarCampos();
        }
        this.dispose();
        coordinadorAplicacion.mostrarAdministrarIngredientes();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAtras;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnSeleccionar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel panelBuscador;
    private javax.swing.JPanel panelPrincipal;
    private javax.swing.JTable tablaIncrementoStock;
    // End of variables declaration//GEN-END:variables
}
